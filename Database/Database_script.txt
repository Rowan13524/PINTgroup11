-- Create Patients table
CREATE TABLE IF NOT EXISTS Patients (
    patient_id INTEGER PRIMARY KEY,
    first_name TEXT,
    last_name TEXT,
    date_of_birth TEXT,
    gender TEXT,
    contact_number TEXT,
    address TEXT,
    email TEXT,
    medical_history TEXT,
    user_id INTEGER,
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- Create Medical Professionals table
CREATE TABLE IF NOT EXISTS MedicalProfessionals (
    medical_professional_id INTEGER PRIMARY KEY,
    first_name TEXT,
    last_name TEXT,
    job_title TEXT,
    contact_number TEXT,
    email TEXT,
    specialization TEXT,
    hospital_or_clinic TEXT,
    user_id INTEGER,
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- Create Patient_Medical_Professional table
CREATE TABLE IF NOT EXISTS Patient_Medical_Professional (
    patient_medical_professional_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    medical_professional_id INTEGER,
    FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    FOREIGN KEY (medical_professional_id) REFERENCES MedicalProfessionals(medical_professional_id)
);

-- Create Users table
CREATE TABLE IF NOT EXISTS Users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    password TEXT,
    email TEXT,
    user_role TEXT
);

-- Create Emergency Contacts table
CREATE TABLE IF NOT EXISTS EmergencyContacts (
    emergency_contact_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    first_name TEXT,
    last_name TEXT,
    relationship TEXT,
    contact_number TEXT,
    FOREIGN KEY (patient_id) REFERENCES Patients(patient_id)
);

-- Create Sensor Data table
CREATE TABLE IF NOT EXISTS SensorData (
    sensor_data_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    timestamp TEXT,
    heart_rate INTEGER,
    blood_pressure TEXT,
    blood_oxygen REAL,
    body_temperature REAL,
    additional_sensor_readings TEXT,
    FOREIGN KEY (patient_id) REFERENCES Patients(patient_id)
);

-- Create Notifications table
CREATE TABLE IF NOT EXISTS Notifications (
    notification_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    medical_professional_id INTEGER,
    message TEXT,
    timestamp TEXT,
    priority TEXT,
    notification_type TEXT,
    acknowledged INTEGER,
    FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    FOREIGN KEY (medical_professional_id) REFERENCES MedicalProfessionals(medical_professional_id)
);

-- Create Appointment Schedule table
CREATE TABLE IF NOT EXISTS AppointmentSchedule (
    appointment_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    medical_professional_id INTEGER,
    date TEXT,
    time TEXT,
    location TEXT,
    purpose TEXT,
    FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    FOREIGN KEY (medical_professional_id) REFERENCES MedicalProfessionals(medical_professional_id)
);

-- Create Medications table
CREATE TABLE IF NOT EXISTS Medications (
    medication_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    medical_professional_id INTEGER,
    medication_name TEXT,
    dosage TEXT,
    frequency TEXT,
    start_date TEXT,
    end_date TEXT,
    instructions TEXT,
    FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    FOREIGN KEY (medical_professional_id) REFERENCES MedicalProfessionals(medical_professional_id)
);

-- Create Devices table
CREATE TABLE IF NOT EXISTS Devices (
    device_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    model TEXT,
    serial_number TEXT,
    firmware_version TEXT,
    last_maintenance_date TEXT,
    FOREIGN KEY (patient_id) REFERENCES Patients(patient_id)
);

-- Create Maintenance Tickets table
CREATE TABLE IF NOT EXISTS MaintenanceTickets (
    ticket_id INTEGER PRIMARY KEY,
    device_id INTEGER,
    patient_id INTEGER,
    medical_professional_id INTEGER,
    issue_description TEXT,
    status TEXT,
    date_opened TEXT,
    date_closed TEXT,
    FOREIGN KEY (device_id) REFERENCES Devices(device_id),
    FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    FOREIGN KEY (medical_professional_id) REFERENCES MedicalProfessionals(medical_professional_id)
);

-- Create Chats table
CREATE TABLE IF NOT EXISTS Chats (
    chat_id INTEGER PRIMARY KEY,
    patient_id INTEGER,
    medical_professional_id INTEGER,
    message TEXT,
    timestamp TEXT,
    sender TEXT,
    FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    FOREIGN KEY (medical_professional_id) REFERENCES MedicalProfessionals(medical_professional_id)
);
